syntax = "proto2";

import "store/common/common-proto.proto";

package mortystorev2.proto;

enum Vote {
  VOTE_NONE = 0;
  VOTE_COMMIT = 1;
  VOTE_ABANDON_FAST = 2;
  VOTE_ABANDON_SLOW = 3;
}

enum Decision {
  DECISION_NONE = 0;
  DECISION_COMMIT = 1;
  DECISION_ABANDON = 2;
  DECISION_ABORT2 = 3;
}

message Version {
  required uint64 client_id = 1;
  required uint64 client_seq = 2;
};

message Dependency {
  required Version version = 1;
}

message Transaction {
  required Version version = 1;
  required uint64 exec_id = 2;
  repeated ReadSetEntry read_set = 3;
  repeated WriteSetEntry write_set = 4;
}

message ReadSetEntry {
  required bytes key = 1;
  required Version version = 2;
  required uint64 req_id = 3;
  required uint64 val_id = 4;
  required bool committed = 5;
}

message WriteSetEntry {
  required bytes key = 1;
  required bytes val = 2;
  required uint64 val_id = 3;
}

message Read {
  required uint64 req_id = 1;
  required Version txn_version = 2;
  required bytes key = 3;
}

message ReadReply {
  required uint64 req_id = 1;
  optional bytes val = 2;
  optional uint64 val_id = 3;
  optional Version version = 4;
  optional bool key_exists = 5;
  optional bool committed = 6;
  optional bool version_below_watermark = 7;
}

message Write {
  required Version txn_version = 1;
  required bytes key = 2;
  required bytes value = 3;
  required uint64 val_id = 4;
}

message Prepare {
  required uint64 req_id = 1;
  required Transaction txn = 2;
}

message PrepareReply {
  required uint64 req_id = 1;
  required uint64 replica_id = 2;
  required Vote vote = 3;
}

message Finalize {
  required uint64 req_id = 1;
  required Version txn_version = 2;
  required uint64 exec_id = 3;
  required uint64 view = 4;
  required Decision decision = 5;
}

message FinalizeReply {
  required uint64 req_id = 1;
  required uint64 replica_id = 2;
  required uint64 view = 3;
  required Decision decision = 4;
}

message Decide {
  required uint64 req_id = 1;
  required Version txn_version = 2;
  required uint64 exec_id = 3;
  required Decision decision = 4;
}

message DecideReply {
  required uint64 req_id = 1;
  required uint64 replica_id = 2;
  required Decision decision = 3;
  required bool deps_changed_decision = 4;
}

message PaxosPrepare {
  required uint64 req_id = 1;
  required Transaction txn = 2;
  required uint64 view = 3;
}

message PaxosPrepareReply {
  required uint64 req_id = 1;
  required uint64 replica_id = 2;
  required Vote vote = 3;
  required Decision decision = 4;
  required uint64 view = 5;
  required uint64 finalize_view = 6;
  required Decision finalize_decision = 7;
}
