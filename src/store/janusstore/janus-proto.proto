syntax = "proto2";

package janusstore.proto;

message DependencyList {
    repeated uint64 txnid = 1;
}

message DependencyMeta {
    optional uint64 txnid = 1;
    repeated uint64 group = 2;
}

message GetMessage {
    optional string key = 1;
}

message PutMessage {
    optional string key = 1;
    optional string value = 2;
}

message TransactionMessage {
    enum Status {
      PREACCEPT = 0;
      ACCEPT = 1;
      COMMIT = 2;
    }
    optional uint64 txnid = 1;
    repeated uint64 groups = 2;
    optional Status status = 3;
    repeated GetMessage gets = 4;
    repeated PutMessage puts = 5;
}

message PreAcceptMessage {
    optional TransactionMessage txn = 1;
    optional uint64 ballot = 2;
}

message PreAcceptOKMessage {
    optional uint64 txnid = 1;
    optional DependencyList dep = 2;
    repeated DependencyMeta depmeta = 3;
}

message PreAcceptNotOKMessage {
    optional uint64 txnid = 1;
}

message AcceptMessage {
    optional uint64 txnid = 1;
    optional DependencyList dep = 2;
    optional uint64 ballot = 3;
}

message AcceptOKMessage {
    optional uint64 txnid = 1;
}

message AcceptNotOKMessage {
    // the highest ballot number seen for the requested transaction
    optional uint64 txnid = 1;
    optional uint64 highest_ballot = 2;
}

message CommitMessage {
    optional uint64 txnid = 1;
    optional DependencyList dep = 2;
    repeated DependencyMeta depmeta = 3;
}

message CommitOKMessage {
    optional uint64 txnid = 1;
    optional bool abandon = 2;
    // technically not a put, but we have to return key/value pairs
    repeated PutMessage pairs = 3;
}

message InquireMessage {
    optional uint64 txnid = 1;
}

message InquireOKMessage {
    // InquireOK sent when the inquired txn status == committing
    optional uint64 txnid = 1;
    optional DependencyList dep = 2;
}

// for failure recovery; implement if time and for now don't care
// message PrepareMessage {}
// message PrepareOKMessage {}

message Request {
     enum Operation {
          GET = 1;
          PREACCEPT = 2;
          ACCEPT = 3;
          COMMIT = 4;
          INQUIRE = 5;
     }
    optional Operation op = 1;
    optional PreAcceptMessage preaccept = 2;
    optional AcceptMessage accept = 3;
    optional CommitMessage commit = 4;
    optional InquireMessage inquire = 5;
    optional string key = 6;
}

message Reply {
     enum Operation {
          GET = 1; // use value
          PREACCEPT_OK = 2;
          PREACCEPT_NOT_OK = 3; // contains no message
          ACCEPT_OK = 4; // contains no message
          ACCEPT_NOT_OK = 5;
          COMMIT_OK = 6;
          INQUIRE_OK = 7;
     }
    optional Operation op = 1;
    optional PreAcceptOKMessage preaccept_ok = 2;
    optional PreAcceptNotOKMessage preaccept_not_ok = 3;
    optional AcceptOKMessage accept_ok = 4;
    optional AcceptNotOKMessage accept_not_ok = 5;
    optional CommitOKMessage commit_ok = 6;
    optional InquireOKMessage inquire_ok = 7;

    // for GETs
    optional string key = 8;
    optional string value = 9;
}
